datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  roles Role[]

  objectHistory ObjectHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model GlobalSetting {
  id String @id @default(cuid())

  key   String
  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("global_setting")
}

model Object {
  id   String  @id @default(cuid())
  code String  @unique
  name String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  history ObjectHistory[]

  @@map("object")
}

model ObjectHistory {
  id String @id @default(cuid())

  objectId String
  object   Object @relation(fields: [objectId], references: [id], onDelete: Cascade)

  locationId String?
  location   Location? @relation(fields: [locationId], references: [id], onDelete: Cascade)

  email String?
  user  User?   @relation(fields: [email], references: [email], onDelete: Cascade)

  verifiedHistoryEntry DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("object_history")
}

model Location {
  id String @id @default(cuid())

  latitude    Float
  longitude   Float
  address String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  History ObjectHistory[]

  @@map("location")
}

model Role {
  id   String @id @default(cuid())
  name String @unique

  users       User[]
  permissions String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
